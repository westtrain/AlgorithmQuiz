function solution(arr) {
    let answer = 0;
    const gcd = (a, b) => a % b === 0 ? b : gcd(b, a % b);
    const lcm = (a, b) => a * b / gcd(a, b);
    let idx = 1;
    while(idx < arr.length){
        answer = lcm(arr[0], arr[idx]);
        arr[0] = answer;
        idx++;
    }
    return answer;
}

// 유클리드 호제법
// 1254와 586의 최대공약수
// 1254 % 586 === 0 ? 586 : gcd(586, 90);
// 586 % 90 === 0 ? 90 : gcd(90, 42);
// 90 % 42 === 0 ? 42 : gcd(42, 6);
// 42 % 6 === 0 ? 6 : gcd(a, b);
// 그렇다면 여러 숫자의 최대공약수는?
// 두 개의 수 A와 B의 최대공약수를 D라 하면, 
// 세 개의 수 A, B, C의 최대공약수는 D와 C의 최대공약수와 같다. 
// 이런 규칙을 이용하면 두 수의 최대공약수를 구하는 함수 
// 한 개만으로도 여러 수의 최대공약수를 구할 수 있다.

// 최대공배수도 위와 같은 조건으로 구할 수 있는데 단 공식은 다음과 같다
// 두 숫자의 최소공약수 나누기 두 숫자의 곱 -> a * b / gcd(a,b)
// a와 b의 최소공약수를 다시 c와 함께 공식에 넣으면 a, b, c의 최소공약수를 구할 수 있다.

